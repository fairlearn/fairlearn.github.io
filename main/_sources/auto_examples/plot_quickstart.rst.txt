
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_quickstart.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_quickstart.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_quickstart.py:


==========================
MetricFrame visualizations
==========================

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default


    import pandas as pd
    from sklearn.datasets import fetch_openml
    from sklearn.metrics import accuracy_score, precision_score
    from sklearn.tree import DecisionTreeClassifier








.. GENERATED FROM PYTHON SOURCE LINES 16-95

.. code-block:: default

    from fairlearn.metrics import (
        MetricFrame,
        count,
        false_negative_rate,
        false_positive_rate,
        selection_rate,
    )

    data = fetch_openml(data_id=1590, as_frame=True)
    X = pd.get_dummies(data.data)
    y_true = (data.target == ">50K") * 1
    sex = data.data["sex"]

    classifier = DecisionTreeClassifier(min_samples_leaf=10, max_depth=4)
    classifier.fit(X, y_true)
    y_pred = classifier.predict(X)

    # Analyze metrics using MetricFrame
    metrics = {
        "accuracy": accuracy_score,
        "precision": precision_score,
        "false positive rate": false_positive_rate,
        "false negative rate": false_negative_rate,
        "selection rate": selection_rate,
        "count": count,
    }
    metric_frame = MetricFrame(
        metrics=metrics, y_true=y_true, y_pred=y_pred, sensitive_features=sex
    )
    metric_frame.by_group.plot.bar(
        subplots=True,
        layout=[3, 3],
        legend=False,
        figsize=[12, 8],
        title="Show all metrics",
    )

    # Customize plots with ylim
    metric_frame.by_group.plot(
        kind="bar",
        ylim=[0, 1],
        subplots=True,
        layout=[3, 3],
        legend=False,
        figsize=[12, 8],
        title="Show all metrics with assigned y-axis range",
    )

    # Customize plots with colormap
    metric_frame.by_group.plot(
        kind="bar",
        subplots=True,
        layout=[3, 3],
        legend=False,
        figsize=[12, 8],
        colormap="Accent",
        title="Show all metrics in Accent colormap",
    )

    # Customize plots with kind (note that we are only plotting the "count" metric here because we are showing a pie chart)
    metric_frame.by_group[["count"]].plot(
        kind="pie",
        subplots=True,
        layout=[1, 1],
        legend=False,
        figsize=[12, 8],
        title="Show count metric in pie chart",
    )

    # Saving plots
    fig = metric_frame.by_group[["count"]].plot(
        kind="pie",
        subplots=True,
        layout=[1, 1],
        legend=False,
        figsize=[12, 8],
        title="Show count metric in pie chart",
    )
    fig[0][0].figure.savefig("filename.png")



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_quickstart_001.png
         :alt: Show all metrics, accuracy, precision, false positive rate, false negative rate, selection rate, count
         :srcset: /auto_examples/images/sphx_glr_plot_quickstart_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_quickstart_002.png
         :alt: Show all metrics with assigned y-axis range, accuracy, precision, false positive rate, false negative rate, selection rate, count
         :srcset: /auto_examples/images/sphx_glr_plot_quickstart_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_quickstart_003.png
         :alt: Show all metrics in Accent colormap, accuracy, precision, false positive rate, false negative rate, selection rate, count
         :srcset: /auto_examples/images/sphx_glr_plot_quickstart_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_quickstart_004.png
         :alt: Show count metric in pie chart
         :srcset: /auto_examples/images/sphx_glr_plot_quickstart_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_quickstart_005.png
         :alt: Show count metric in pie chart
         :srcset: /auto_examples/images/sphx_glr_plot_quickstart_005.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.796 seconds)


.. _sphx_glr_download_auto_examples_plot_quickstart.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quickstart.py <plot_quickstart.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quickstart.ipynb <plot_quickstart.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
